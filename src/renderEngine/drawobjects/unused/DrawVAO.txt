package renderEngine.drawobjects;

import java.nio.FloatBuffer;
import java.util.ArrayList;

import org.lwjgl.BufferUtils;

import renderEngine.Loader;
import renderEngine.RawModel;
import renderEngine.shaders.UniformBufferObject;

public class DrawVAO<C extends DrawCall, D extends DrawData> {

    private Loader loader;

    private DrawObject<C, D> drawObject;

    private ArrayList<C> drawCalls;
    private ArrayList<D> drawDataList;

    private int vertexCount;

    public DrawVAO(DrawObject<C, D> drawObject, Loader loader) {
        this.drawObject = drawObject;
        this.loader = loader;

        drawCalls = new ArrayList<>();
        drawDataList = new ArrayList<>(UniformBufferObject.UBO_ARRAY_LENGTH);
    }

    public int getDataIndex(D drawData) {
        for (int i = 0; i < drawDataList.size(); i++) {
            if (drawDataList.get(i).equals(drawData)) {
                return i;
            }
        }
        return -1;
    }

    public boolean hasRemainingCapacity() {
        return drawDataList.size() < UniformBufferObject.UBO_ARRAY_LENGTH;
    }

    public void addDrawCall(C drawCall, D drawData) {
        addDrawCall(drawCall, drawDataList.size());
        drawDataList.add(drawData);
    }

    public void addDrawCall(C drawCall, int dataIndex) {
        vertexCount += drawObject.getVertexCount(drawCall);
        drawCall.setDataIndex(dataIndex);
        drawCalls.add(drawCall);
    }

    public RawModel loadModel() {
        float[] positions = new float[vertexCount * 3];
        float[] sizes = new float[vertexCount * 2];
        float[] colors = new float[vertexCount * 4];
        int[] dataIndices = new int[vertexCount];
        int i = 0;
        for (C drawCall : drawCalls) {
            positions[3 * i] = (float) drawCall.getPosition().x;
            positions[3 * i + 1] = (float) drawCall.getPosition().y;
            positions[3 * i + 2] = (float) drawCall.getDepth();

            sizes[2 * i] = (float) drawCall.getSize().x;
            sizes[2 * i + 1] = (float) drawCall.getSize().y;

            colors[4 * i] = (float) drawCall.getColor().x;
            colors[4 * i + 1] = (float) drawCall.getColor().y;
            colors[4 * i + 2] = (float) drawCall.getColor().z;
            colors[4 * i + 3] = (float) drawCall.getAlpha();

            dataIndices[i] = drawCall.getDataIndex();

            i++;
        }

        return loader.laodToVAO(positions, sizes, colors, dataIndices);
    }

    public FloatBuffer getUBOData() {
        float[][] uboData = new float[drawDataList.size()][];
        int index = 0;
        for (D drawData : drawDataList) {
            uboData[index++] = drawData.getUBOData();
        }

        int numUBOArrays = drawObject.getNumUBOArrays();
        FloatBuffer buffer = BufferUtils.createFloatBuffer(numUBOArrays * 4 * UniformBufferObject.UBO_ARRAY_LENGTH);
        for (int j = 0; j < numUBOArrays; j++) {
            for (int i = 0; i < uboData.length; i++) {
                buffer.put(uboData[i][4 * j]);
                buffer.put(uboData[i][4 * j + 1]);
                buffer.put(uboData[i][4 * j + 2]);
                buffer.put(uboData[i][4 * j + 3]);
            }
            for (int i = 0; i < UniformBufferObject.UBO_ARRAY_LENGTH - drawDataList.size(); i++) {
                buffer.put(0f);
                buffer.put(0f);
                buffer.put(0f);
                buffer.put(0f);
            }
        }
        buffer.flip();
        return buffer;
    }

    public ArrayList<C> getDrawCalls() {
        return drawCalls;
    }
}