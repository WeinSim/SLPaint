package renderEngine.drawobjects;

import java.util.ArrayList;

import renderEngine.Loader;
import renderEngine.shaders.ShaderProgram;

/*
 * Per-drawcall data:
 * 
 * Rect fill:
 * position, size, color1, color2, checkerboardSize, boundingBox
 * 
 * Rect outline:
 * position, size, strokeWeight, color1, color2, checkerboardSize, boundingBox
 * 
 * Ellipse (fill):
 * position, size, color1, color2, checkerboardSize, boundingBox
 * 
 * Text (fill):
 * position, size, text, color1, color2, checkerboardSize, boundingBox
 * 
 * HSL (fill):
 * position, size, color, type, boundingBox
 * 
 * 
 * 
 * Per-vertex data:
 * 
 * 
 * Rect fill:
 * position, size, color1, color2, checkerboardSize, boundingBox
 * 
 * Rect outline:
 * position, size, strokeWeight, color1, color2, checkerboardSize, boundingBox
 * 
 * Ellipse (fill):
 * position, size, color1, color2, checkerboardSize, boundingBox
 * 
 * Text (fill):
 * position, scale, charID, color1, color2, checkerboardSize, boundingBox
 * 
 * HSL (fill):
 * position, size, color, type, boundingBox
 * 
 */
public abstract sealed class DrawObject<C extends DrawCall, D extends DrawData>
        permits RectFill, RectOutline, Ellipse, Text {

    public static final int NUM_DRAW_OBJECT_TYPES = 4;

    private final ShaderProgram shaderProgram;
    private final String uboName;
    private final int numUBOArrays;
    private final int numVBOs;

    private Loader loader;

    private ArrayList<DrawVAO<C, D>> vaos;

    public DrawObject(ShaderProgram shaderProgram, String uboName, int numUBOArrays, int numVBOs, Loader loader) {
        this.shaderProgram = shaderProgram;
        this.uboName = uboName;
        this.numUBOArrays = numUBOArrays;
        this.numVBOs = numVBOs;
        this.loader = loader;

        vaos = new ArrayList<>();
    }

    public void addDrawCall(C call, D data) {
        // Determine a DrawVAO that already contains the correct draw data.
        DrawVAO<C, D> vao = null;
        int dataIndex = -1;
        for (DrawVAO<C, D> v : vaos) {
            dataIndex = v.getDataIndex(data);
            if (dataIndex != -1) {
                vao = v;
                break;
            }
        }
        if (vao == null) {
            // No VAO has the correct draw data. Create new one if neccessary.
            boolean createNewVAO = true;
            if (!vaos.isEmpty()) {
                vao = vaos.getLast();
                createNewVAO = !vao.hasRemainingCapacity();
            }
            if (createNewVAO) {
                vao = new DrawVAO<C, D>(this, loader);
                vaos.add(vao);
            }
        }
        if (dataIndex == -1) {
            // The draw data already exists in some VAO.
            vao.addDrawCall(call, data);
        } else {
            // A new array index needs to be allocated for the draw data.
            vao.addDrawCall(call, dataIndex);
        }
    }

    public void clear() {
        vaos.clear();
    }

    protected abstract int getVertexCount(C drawCall);

    public int getNumUBOArrays() {
        return numUBOArrays;
    }

    public ShaderProgram getShaderProgram() {
        return shaderProgram;
    }

    public String getUBOName() {
        return uboName;
    }

    public int getNumVBOs() {
        return numVBOs;
    }

    public ArrayList<DrawVAO<C, D>> getVAOs() {
        return vaos;
    }
}