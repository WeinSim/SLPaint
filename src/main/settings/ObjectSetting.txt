package main.settings;

import java.util.LinkedHashMap;

import sutil.json.values.JSONObject;
import sutil.json.values.JSONValue;

public abstract sealed class ObjectSetting extends Setting<LinkedHashMap<String, Setting<?>>> permits ExampleObjectSetting {

    public ObjectSetting(String identifier) {
        super(identifier);
    }

    public JSONValue getJSONValue() {
        JSONObject object = new JSONObject();
        for (String name : value.keySet()) {
            object.put(name, value.get(name).getJSONValue());
        }
        return object;
    }

    @Override
    public void setJSONValue(JSONValue value) {
        if (value instanceof JSONObject object) {
            this.value = new LinkedHashMap<>();
            for (String name : object.getNames()) {
                String identifier = String.format("%s.%s", this.identifier, name);
                Setting<?> setting = createNew(identifier);
                setting.setJSONValue(object.get(name));
                this.value.put(name, setting);
            }
        } else {
            handleIncorrectJSONType("JSONObject", value.getClass().getName());
        }
    }

    protected abstract Setting<?> createNew(String name);
}